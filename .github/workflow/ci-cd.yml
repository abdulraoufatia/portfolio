name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          attempt=1
          max_attempts=3
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts: Installing dependencies..."
            if npm ci; then
              echo "Dependencies installed successfully"
              break
            fi
            attempt=$((attempt + 1))
            if [ $attempt -le $max_attempts ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "Failed to install dependencies after $max_attempts attempts"
            exit 1
          fi
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run tests
        run: npm run test
        
      - name: Check types
        run: npm run type-check

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: test
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          attempt=1
          max_attempts=3
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts: Installing dependencies..."
            if npm ci; then
              echo "Dependencies installed successfully"
              break
            fi
            attempt=$((attempt + 1))
            if [ $attempt -le $max_attempts ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "Failed to install dependencies after $max_attempts attempts"
            exit 1
          fi
        
      - name: Build
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}